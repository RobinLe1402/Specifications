Robin Lemanska                                              October 2024


        rlLang Translation File Format Specification version 1.0

Notices

   Copyright (c) 2024 Robin Lemanska

   Permission is granted to copy and distribute this document for any
   purpose and without charge, including translations into other
   languages and incorporation into compilations, provided that the
   copyright notice and this notice are preserved, and that any
   substantive changes or deletions from the original are clearly
   marked.

   This specification can be found found online at the URL
   <https://rle.sh/git-file/Specifications/filetypes/text/rlLang/
   v1.0.txt>

Abstract

   This specification defines a file format that contains UTF-8 encoded
   texts and optionally additional data required for creating a new
   translation. It's divided into a header and multiple chunks.

Table of Contents

   1. Introduction ................................................... #
      1.1. Purpose ................................................... #
      1.2. Intended audience ......................................... #
      1.3. Definitions of terms and conventions used ................. #
   2. File layout overview ........................................... #
   3. Detailed specification ......................................... #
      3.1. Chunks .................................................... #
         3.1.1. Chunk types .......................................... #
         3.1.2. Chunk order .......................................... #
      3.2. String references ......................................... #
      3.3. Data format ............................................... #
         3.3.1. File header .......................................... #
         3.3.2. Chunk header ......................................... #
         3.3.3. "hdr " chunk ......................................... #
         3.3.4. "str " chunk ......................................... #
         3.3.5. "data" chunk ......................................... #
         3.3.6. "astr" chunk ......................................... #
         3.3.7. "cstm" chunk ......................................... #
         3.3.8. "dir " chunk ......................................... #
         3.3.9. "id  " chunk ......................................... #
         3.3.10. "note" chunk ........................................ #
         3.3.11. "odat" chunk ........................................ #
         3.3.12. "tag " chunk ........................................ #
   4. References ..................................................... #
   5. Source code .................................................... #
   6. Acknowledgements ............................................... #

1. General

   1.1. Purpose

      The purpose of this specification is to define a file format that:

         * stores uncompressed, UTF-8 encoded texts;
         * can quickly be decoded;
         * can use a single stored string multiple times;
         * may contain additional info necessary for debugging, like
           the original text in a different language, or additional
           notes for the translator (like the context in which the text
           is displayed);
         * can be read in chunks, where optional chunks can easily be
           skipped by the software reading the file;
         * is extensible by defining new chunk types.

   1.2. Intended audience

      This specification is intended for use by implementors of software
      that displays text that might get translated into other languages.

      The text of the specification assumes a basic background in
      programming at the level of bits and other primitive data
      representations, as well as a general understanding of the basic
      syntax of the C programming language.

   1.3. Definitions of terms and conventions used

      Byte: 8 bits stored as a unit. Also called an octet.
      For this specification, a byte is exactly 8 bits, even on machines
      which store a character on a number of bits different from eight.

      String: A sequence of bytes that can be decoded into text
      characters.

      Main string: A string defined in the "str " chunk, see section
      3.1.1 and 3.3.4 for details.

      Tag: A short text that can be used to categorize a main string,
      like "dialogue" for character dialogue in a video game or "menu"
      for the label of a menu button.

      Chunk: A sequence of bytes grouped into a larger unit, preceded by
      a header.

      0xHH: Hexadecimal representation of a binary value, where HH is a
      sequence of two or more hexadecimal digits.
      Pairs of two hexadecimal digits (= bytes) might be divided by a
      single quote (').

2. File layout overview

   The file starts with a file header.

   After the header come multiple chunks. Some are optional and some are
   critical. All chunks are preceded by a header of always the same
   format.

   Part of the chunk order is specified and cannot be changed, but some
   chunks may appear in any order. See section 3.1.2 for details on the
   chunk order.

3. Detailed specification

   3.1. Chunks

      This section contains general information about chunks.

      For detailed definitions of the chunk header and the different
      chunk types, see section 3.3.

      3.1.1. Chunk types

         The chunk header contains a four-character chunk type
         identifier. These chunk type identifiers are unique for each
         chunk type. Multiple chunks of the same type might exist within
         a file, depending on the chunk type.

         There are optional and critical chunks. Optional chunks are not
         required in the final version of the file that's distributed
         alongside the main software, while critical chunks contain the
         main data and must be part of a valid rlLang file.

         Some optional chunks might be critical to other optional chunks
         and may hence be required once a different optional chunk type
         is included in the file.

         The "hdr " (0x68 0x64 0x72 0x20) critical header chunk contains
         general information about the other critical chunks.

         The "str " (0x73 0x74 0x72 0x20) critical string chunk contains
         all the main text strings that were or may get translated. It
         can't contain any unused or duplicate strings.

         The "data" (0x64 0x61 0x74 0x61) critical data chunk contains
         references to the main strings. The order of the references
         implies a zero-based index that is used to identify a text.
         Multiple indexes can point to the same string, but a single
         index only points to a single string.

         The "astr" (0x61 0x73 0x74 0x72) optional additional string
         chunk contains additional strings for the other optional
         chunks. It's good practice to only save additional strings that
         are actually referenced at least once in the file. This chunk
         is required when at least one of the following chunk types are
         present: "cstm", "dir ", "id  ", "note", "odat", "tag ".

         The "cstm" (0x63 0x73 0x74 0x6D) optional custom data chunk
         contains custom string properties for main strings. These can
         be freely defined and are identified by their own unique
         identifier strings, called "property identifier". It's
         recommended to only use lowercase ASCII characters, digits and
         underscores for property identifiers; however, this is not
         required for a valid rlLang file. This chunk is special in that
         it's currently the only chunk type that may appear in multiple
         chunks within a single file. A single "cstm" chunk always
         defines a single custom property and also contains the
         references to all associated values.

         The "dir " (0x64 0x69 0x72 0x20) optional directory chunk
         contains a directory-like structure that the main strings can
         be sorted into. If this chunk is present, it must assign a
         directory as well as a name to each of the main strings. All
         elements (texts and subdirectories) within a single directory
         must have a name unique to this directory. A subdirectory
         cannot have the same name as a file in that same directory.
         However, the same element names can be reused in
         subdirectories.

         The "id  " (0x69 0x64 0x20 0x20) optional ID string chunk
         contains assignments of ID strings for main strings. The same
         ID string cannot be associated with multiple main strings.

         The "note" (0x6E 0x6F 0x74 0x65) optional note chunk contains
         definitions and assignments of notes for main strings. Each
         main string can have zero or more notes assigned, and each note
         can be assigned to zero or more main strings.

         The "odat" (0x6F 0x64 0x61 0x74) optional original data chunk
         contains original, untranslated texts that can be used for
         creating a new translation.

         The "tag " (0x74 0x61 0x67 0x20) optional tag chunk contains
         definitions and assignments of tags for main strings. Each main
         string can have zero or more tags assigned, and each tag can be
         assigned to zero or more main strings.

      3.1.2. Chunk order

         Right after the file header, the critical chunks must appear
         in this order:

            * "hdr "
            * "str "
            * "data"

         All the optional chunks follow. The only limitation in the
         order of the optional chunk is that the "astr" chunk must come
         before any other optional chunk.

   3.2. String references

         Strings are referenced via integers. These integers are the
         offset, in bytes, of the strings within their respective
         chunks. String references in the "data" chunk, point to the
         "str " chunk while in all optional chunks, the references point
         to the "astr" chunk. The reference point is right after the
         chunk header, meaning that the first stored string always has
         offset 0 and is therefore referenced by the value 0.

         Strings can only ever be referenced by their first character.
         The references can not be modified into being references to
         substrings starting at a later character than the original
         string.

   3.3. Data format

      In the following sections, structs from the C language will be
      used to illustrate data structures. The following types are used:

         char        A single byte representing a character. In this
                     specification, all strings are encoded using UTF-8;
                     so all char values represent UTF-8 encoding units.
                     For details on the UTF-8 encoding, see reference
                     [1].
         uintX_t     An unsigned integer with X bits, X being any of the
                     following values: 8, 16, 32, 64

      It's assumed no automatic padding is applied to the structs,
      meaning that for each struct, the size of the struct in memory is
      equal to the sum of the sizes of all members:

         struct teststruct { uint64_t a; uint8_t b; };
         // sizeof(struct teststruct) must be equal to
         // sizeof(uint64_t) + sizeof(uint8_t) which in this case equals
         //        8         +        1        = 9

      Multibyte values are saved in little endian, meaning that the most
      significant byte is the first to be written to/read from a file.
      The 32-bit value 0x01234567, for example, would be represented by:

         0x67 0x45 0x23 0x01

      For better readability, if a single chunk is made up of multiple
      structs, the "main struct" is always presented first; even though
      this would result in invalid C code, as structs must be declared
      before they're first used.

      3.3.1. File header

         typedef struct
         {
           char     sMagicNo[6]; // "rlLang"
           uint8_t  iVersion[2]; // file format version: 0x01 0x00
           uint64_t iFileSize;   // the total size of the file,
                                 // including this header, in bytes.
         } rl_lang_filehdr;

      3.3.2. Chunk header

         typedef struct
         {
           char     sChunkType[4]; // the chunk type identifier.
           uint64_t iChunkSize;    // the size of the chunk, in bytes,
                                   // excluding this header.
         } rl_lang_chunkheader;

      3.3.3. "hdr " chunk

         typedef struct
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           char     sLang[2]; // ISO 639-1 language code, like "en" for
                              // english or "de" for german. See
                              // reference [2].
           uint64_t iCount;   // the count of main texts.
         } rl_lang_chunktype_hdr;

      3.3.4. "str " chunk

         typedef struct
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           char szStrings[][]; // a series of zero-terminated UTF-8
                               // strings. the same string shall not
                               // appear more than once.
         } rl_lang_chunktype_str;

      3.3.5. "data" chunk

         typedef struct
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           uint64_t iStringPtrs[]; // pointers to the main strings.
                                   // the size of this array is
                                   // defined in the "hdr " chunk.
         } rl_lang_chunktype_data;

      3.3.6. "astr" chunk

         // same as the "str " chunk.

      3.3.7. "cstm" chunk

         typedef struct
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           uint64_t iPropertyName; // pointer to the unique
                                   // property name.
           uint64_t iValueCount;   // the size of the oValues
                                   // array.

           rl_lang_cstm_entry oValues[]; // the actual values.
         } rl_lang_chunktype_cstm;

         typedef struct
         {
           uint64_t iText;  // ID of the main string. the same ID
                            // cannot appear multiple times within the
                            // same "cstm" chunk.
           uint64_t iValue; // pointer to the property value string.
         } rl_lang_cstm_entry;

      3.3.8. "dir " chunk

         typedef struct
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           uint64_t          iDirCount; // the size of the oDirs array.
           rl_lang_dir_entry oDirs[];   // directory definitions.

           rl_lang_dir_text  oTexts[];  // data for each main string.
         } rl_lang_chunktype_dir;

         // the oTexts array has one entry for each main string. the
         // index of an entry in the oTexts array is the ID of the
         // associated main string.

         typedef struct
         {
           uint64_t iDirName; // pointer to the name of the directory.
           uint64_t iParent;  // the index of the parent directory.
         } rl_lang_dir_entry;

         // each entry in the oDirs table of the rl_lang_chunktype_dir
         // struct can only reference a directory with a lower index, or
         // the root directory.
         // the value 0xFFFFFFFFFFFFFFFF (UINT64_MAX) is defined as the
         // (unnamed) root directory, limiting iDirCount to a maximum of
         // UINT64_MAX - 1.

         typedef struct
         {
           uint64_t iTextName;  // the name of the text.
           uint64_t iParentDir; // the index of the parent directory.
         } rl_lang_dir_text;

      3.3.9. "id  " chunk

         typedef struct
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           uint64_t         iCount; // the size of the oIDs array.
           rl_lang_id_entry oIDs[]; // the ID strings.
         } rl_lang_chunktype_id;

         typedef struct
         {
           uint64_t iText;   // the ID of the main string.
           uint64_t iTextID; // the string ID to be assigned to the main
                             // string.
         } rl_lang_id_entry;

         // the main string IDs referenced in the oIDs array of the
         // rl_lang_chunktype_id struct must always increase, meaning
         // that the rl_lang_id_entry values are ordered by iText.

      3.3.10. "note" chunk

         typedef struxt
         {
           rl_lang_chunkheader oHeader; // the chunk header.

           uint64_t           iCount;   // the size of the oNotes array.
           rl_lang_note_entry oNotes[]; // the actual note data.
         } rl_lang_chunktype_note;

         typedef struct
         {
           uint64_t iNote;      // pointer to the note text.
           uint64_t iTextCount; // size of the iTexts array.
           uint64_t iTexts[];   // IDs of the main strings this note is
                                // linked to.
         } rl_lang_note_entry;

         // the main string IDs in the iTexts array must be in ascending
         // order, each value in that array must be unique.

      3.3.11. "odat" chunk

         // same as the "id  " chunk, except that the text ID stringss
         // are now the original strings which also mustn't be unique.

      3.3.12. "tag " chunk

         // same as the "note" chunk.


4. References

   [1] Francois Yergeau, "UTF-8, a transformation format of
       ISO 10646" (RFC 2629), available at
       https://datatracker.ietf.org/doc/html/rfc3629 (as HTML) and
       https://www.ietf.org/rfc/rfc3629.txt (as raw ASCII)
   [2] Library of Congress, "Codes for the Representation of Names of
       Languages", available at
       https://www.loc.gov/standards/iso639-2/php/code_list.php

5. Source code

   Source code for a C++ static library for reading rlLang files as well
   as miscellaneous tools for working with rlLang files is available at
   https://rle.sh/git-repo/rlLang.

6. Acknowledgements

   Trademarks cited in this document are the property of their
   respective owners.

   Robin Lemanska designed the rlLang file format.
