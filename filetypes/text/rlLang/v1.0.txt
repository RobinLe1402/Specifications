<NOTE: This is a work-in-progress specification. Links might be invalid
and the technical details might change drastically without notice. Don't
reference this specification yet.>

Robin Lemanska                                              October 2024


        rlLang Translation File Format Specification version 1.0

Notices

   Copyright (c) 2024 Robin Lemanska

   Permission is granted to copy and distribute this document for any
   purpose and without charge, including translations into other
   languages and incorporation into compilations, provided that the
   copyright notice and this notice are preserved, and that any
   substantive changes or deletions from the original are clearly
   marked.

   This specification can be found found online at the URL
   <https://rle.sh/git-file/Specifications/filetypes/text/rlLang/
   v1.0.txt>

Abstract

   This specification defines a file format that contains UTF-8 encoded
   texts and optionally additional data required for creating a new
   translation. It's divided into a header and multiple chunks.

Table of Contents

   1. Introduction ................................................... #
      1.1. Purpose ................................................... #
      1.2. Intended audience ......................................... #
      1.3. Definitions of terms and conventions used ................. #
   2. File layout overview ........................................... #
   3. Detailed specification ......................................... #
      3.1. Overall conventions ....................................... #
      3.2. Chunks .................................................... #
         3.2.1. Chunk types .......................................... #
         3.2.2. Chunk order .......................................... #
      3.3. Data format ............................................... #
   4. References ..................................................... #
   5. Source code .................................................... #
   6. Acknowledgements ............................................... #
   7. Appendix: <...> ................................................ #

1. General

   1.1. Purpose

      The purpose of this specification is to define a file format that:

         * stores uncompressed, UTF-8 encoded texts;
         * can quickly be decoded;
         * can use a single stored string multiple times;
         * may contain additional info necessary for debugging, like
           the original text in a different language, or additional
           notes for the translator (like the context in which the text
           is displayed);
         * can be read in chunks, where optional chunks can easily be
           skipped by the software reading the file;
         * is extensible by defining new chunk types.

   1.2. Intended audience
   
      This specification is intended for use by implementors of software
      that displays text that might get translated into other languages.

      The text of the specification assumes a basic background in
      programming at the level of bits and other primitive data
      representations.

   1.3. Definitions of terms and conventions used

      Byte: 8 bits stored as a unit. Also called an octet.
      For this specification, a byte is exactly 8 bits, even on machines
      which store a character on a number of bits different from eight.

      String: A sequence of bytes that can be decoded into text
      characters.

      Main string: A string defined in the "str " chunk, see section
      3.2.1 for details.

      Tag: A short text that can be used to categorize a main string,
      like "dialogue" for character dialogue in a video game or "menu"
      for the label of a menu button.

      Chunk: A sequence of bytes grouped into a larger unit, preceded by
      a header.

      0xHH: Hexadecimal representation of a binary value, where HH is a
      sequence of two or more hexadecimal digits.
      Pairs of two hexadecimal digits (= bytes) might be divided by a
      single quote (').

2. File layout overview

   The file starts with a file header.

   After the header come multiple chunks. Some are optional and some are
   critical. All chunks are preceded by a header of always the same
   format.

   Part of the chunk order is specified and cannot be changed, but some
   chunks may appear in any order. See Chapter 3 for details on the
   chunk order.

3. Detailed specification

   3.1. Overall conventions

      <...>

   3.2. Chunks

      This section contains general information about chunks.

      For detailed definitions of the chunk header and the different
      chunk types, see section 3.3.

      3.2.1. Chunk types

         The chunk header contains a four-character chunk type
         identifier. These chunk type identifiers are unique for each
         chunk type. Multiple chunks of the same type might exist within
         a file, depending on the chunk type.

         There are optional and critical chunks. Optional chunks are not
         required in the final version of the file that's distributed
         alongside the main software, while critical chunks contain the
         main data and must be part of a valid rlLang file.

         Some optional chunks might be critical to other optional chunks
         and may hence be required once a different optional chunk type
         is included in the file.

         The "hdr " (hex: 68 64 72 20) critical header chunk contains
         general information about the other critical chunks.

         The "data" (hex: 64 61 74 61) critical data chunk contains
         references to the main strings. The order of the references
         implies a zero-based index that is used to identify a text.
         Multiple indexes can point to the same string, but a single
         index only points to a single string.

         The "str " (hex: 73 74 72 20) critical string chunk contains
         all the main text strings that were or may get translated.

         The "astr" (hex: 61 73 74 72) optional additional string chunk
         contains additional strings for the other optional chunks. It's
         good practice to only save additional strings that are actually
         referenced at least once in the file. This chunk is required
         when at least one of the following chunk types are present:
         "cstm", "dir ", "id  ", "note", "odat", "tag ".

         The "cstm" (hex: 63 73 74 6D) optional custom data chunk
         contains custom string properties for main strings. These can
         be freely defined and are identified by their own unique
         identifier strings, called "property identifier".
         This chunk is special in that it's currently the only chunk
         type that may appear in multiple chunks within a single file.
         A single "cstm" chunk always defines a single custom property
         and also contains the references to all associated values.

         The "dir " (hex: 64 69 72 20) optional directory chunk contains
         a directory-like structure that the main strings can be sorted
         into. If this chunk is present, it must assign a directory as
         well as a name unique within this directory to each of the main
         strings.

         The "id  " (hex: 69 64 20 20) optional ID string chunk contains
         assignments of ID strings for main strings. The same ID string
         cannot be associated with multiple main strings.

         The "note" (hex: 6E 6F 74 65) optional note chunk contains
         definitions and assignments of notes for main strings. Each
         main string can have zero or more notes assigned, and each note
         can be assigned to zero or more main strings.

         The "odat" (hex: 6F 64 61 74) optional original data chunk
         contains original, untranslated texts that can be used for
         creating a new translation.

         The "tag " (hex: 74 61 67 20) optional tag chunk contains
         definitions and assignments of tags for main strings. Each main
         string can have zero or more tags assigned, and each tag can be
         assigned to zero or more main strings.

      3.2.2. Chunk order

         Right after the file header, the critical chunks must appear
         in this order:
         
            * "hdr "
            * "str "
            * "data"
         
         All the optional chunks follow. The only limitation in the
         order of the optional chunk is that the "astr" chunk must come
         before any other optional chunk.

   3.3. Data format

      <TODO: specify the file header and all the chunks in detail!>

4. References

   [1] <...>
   
   <TODO: add references, like the UTF-8 specification at
   https://datatracker.ietf.org/doc/html/rfc3629>

5. Source code

   <TODO: write an implementation of an rlLang decoder, and maybe an
   editing tool>

6. Acknowledgements

   Trademarks cited in this document are the property of their
   respective owners.

   <... designed/wrote software/... ...>

7. Appendix: <...>

   <...>
